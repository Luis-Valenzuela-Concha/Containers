services:
  db:
    image: postgres
    volumes:
      - ./database:/docker-entrypoint-initdb.d
      - db_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_DB: $DB_NAME
      POSTGRES_USER: $DB_USER
      POSTGRES_PASSWORD: $DB_PASSWORD
    networks:
      - mynet
    restart: always
  
  rest_server:
    build: 
      context: ./server/REST
      dockerfile: Dockerfile
    env_file:
      - ./server/.env
    depends_on:
      - db
    networks:
      - mynet
    restart: always

  rest_client:
    build: 
      context: ./client/REST
      dockerfile: Dockerfile
    env_file:
      - ./client/.env
    depends_on:
      - rest_server
    stdin_open: true
    tty: true
    networks:
      - mynet

  websocket_server:
    build: 
      context: ./server/WEBSOCKET
      dockerfile: Dockerfile
    env_file:
      - ./server/.env
    depends_on:
      - db
    networks:
      - mynet
    restart: always

  websocket_client:
    build:
      context: ./client/WEBSOCKET
      dockerfile: Dockerfile
    env_file:
      - ./client/.env
    depends_on:
      - db
      - websocket_server
    networks:
      - mynet

  grpc_client:
    build:
      context: ./client/GRPC
      dockerfile: Dockerfile
    env_file:
      - ./client/.env
    depends_on:
      - grpc_server
    stdin_open: true
    tty: true
    networks:
      - mynet

  grpc_server:
    build:
      context: ./server/GRPC
      dockerfile: Dockerfile
    env_file:
      - ./server/.env
    depends_on:
      - db
    networks:
      - mynet
    restart: always

  rabbitmq:
    image: rabbitmq:3-management
    networks:
      - mynet
    restart: always

  rabbitmq_client:
    build:
      context: ./client/RABBITMQ
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq_server
    stdin_open: true
    tty: true
    networks:
      - mynet

  rabbitmq_server:
    build:
      context: ./server/RABBITMQ
      dockerfile: Dockerfile
    env_file:
      - ./server/.env
    depends_on:
      - db
      - rabbitmq
    networks:
      - mynet
    restart: always
  
volumes:
  db_data:

networks:
  mynet:
