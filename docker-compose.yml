services:
  db:
    image: postgres
    volumes:
      - ./database:/docker-entrypoint-initdb.d
      - db_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_DB: $DB_NAME
      POSTGRES_USER: $DB_USER
      POSTGRES_PASSWORD: $DB_PASSWORD
    networks:
      - mynet
    restart: always
    # ports:
    #   - "5432:5432"

  #pgadmin:
  #  image: dpage/pgadmin4
  #  environment:
  #    PGADMIN_DEFAULT_EMAIL: admin@example.com
  #    PGADMIN_DEFAULT_PASSWORD: admin
  #  ports:
  #    - "8080:80"
  #  networks:
  #    - mynet
  
  rest_server:
    build: .
    command: python -u ./server/rest_server.py
    env_file:
      - ./server/.env
    depends_on:
      - db
    networks:
      - mynet
    restart: always

  rest_client:
    build: .
    command: python -u ./client/rest_client.py
    depends_on:
      - rest_server
    networks:
      - mynet

  websocket_server:
    build: .
    command: python -u ./server/websocket_server.py
    env_file:
      - ./server/.env
    depends_on:
      - db
    networks:
      - mynet
    restart: always

  websocket_client:
    build: .
    command: python -u ./client/websocket_client.py
    depends_on:
      - db
      - websocket_server
    networks:
      - mynet

  python_client:
    build: '.'
    container_name: python_client
    depends_on:
      - rest_server
    command: tail -f /dev/null  
    networks:
      - mynet
    tty: true 
    stdin_open: true 
    restart: always

  grpc_client:
    build: .
    command: python -u ./client/grpc_client.py
    depends_on:
      - grpc_server
    networks:
      - mynet

  grpc_server:
    build: .
    command: python -u ./server/grpc_server.py
    env_file:
      - ./server/.env
    depends_on:
      - db
    networks:
      - mynet
    restart: always

  rabbitmq:
    image: rabbitmq:3-management
    networks:
      - mynet
    restart: always
  
volumes:
  db_data:

networks:
  mynet:
